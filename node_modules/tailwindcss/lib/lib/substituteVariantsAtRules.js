"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _lodash = _interopRequireDefault(require("lodash"));

var _postcss = _interopRequireDefault(require("postcss"));

var _generateVariantFunction = _interopRequireDefault(require("../util/generateVariantFunction"));

var _escapeClassName = _interopRequireDefault(require("../util/escapeClassName"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function generatePseudoClassVariant(pseudoClass) {
  return (0, _generateVariantFunction.default)(({
    modifySelectors,
    separator
  }) => {
    return modifySelectors(({
      className
    }) => {
      return `.${(0, _escapeClassName.default)(`${pseudoClass}${separator}${className}`)}:${pseudoClass}`;
    });
  });
}

function ensureIncludesDefault(variants) {
  return variants.includes('default') ? variants : ['default', ...variants];
}

const defaultVariantGenerators = {
  default: (0, _generateVariantFunction.default)(() => {}),
  'group-hover': (0, _generateVariantFunction.default)(({
    modifySelectors,
    separator
  }) => {
    return modifySelectors(({
      className
    }) => {
      return `.group:hover .${(0, _escapeClassName.default)(`group-hover${separator}${className}`)}`;
    });
  }),
  hover: generatePseudoClassVariant('hover'),
  'focus-within': generatePseudoClassVariant('focus-within'),
  focus: generatePseudoClassVariant('focus'),
  active: generatePseudoClassVariant('active')
};

function _default(config, {
  variantGenerators: pluginVariantGenerators
}) {
  return function (css) {
    const variantGenerators = _objectSpread({}, defaultVariantGenerators, pluginVariantGenerators);

    css.walkAtRules('variants', atRule => {
      const variants = _postcss.default.list.comma(atRule.params).filter(variant => variant !== '');

      if (variants.includes('responsive')) {
        const responsiveParent = _postcss.default.atRule({
          name: 'responsive'
        });

        atRule.before(responsiveParent);
        responsiveParent.append(atRule);
      }

      _lodash.default.forEach(_lodash.default.without(ensureIncludesDefault(variants), 'responsive'), variant => {
        variantGenerators[variant](atRule, config);
      });

      atRule.remove();
    });
  };
}